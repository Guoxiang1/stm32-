<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Templete.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Templete.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Dec 13 14:48:19 2024
<BR><P>
<H3>Maximum Stack Usage =        480 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; VL53L1_set_mode &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[63]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4c]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[134]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[135]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[136]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[137]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[54]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[138]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[139]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[140]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[141]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[146]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[147]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[148]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[149]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[151]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[152]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[153]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[154]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[4f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[155]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[51]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[156]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[55]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; VL53L1_set_mode &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[157]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[64]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[58]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[158]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[159]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_QSCLK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_NNMI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CPSMS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CIMI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGPADDR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGATT
</UL>

<P><STRONG><a name="[5e]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[69]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_QSCLK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_NNMI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CPSMS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CIMI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGPADDR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGATT
</UL>

<P><STRONG><a name="[15a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[5d]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[61]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[52]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[57]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[160]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[65]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[85]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[83]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[80]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[82]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[86]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[84]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[67]"></a>BC25_CGATT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bc25.o(i.BC25_CGATT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BC25_CGATT &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
</UL>

<P><STRONG><a name="[6b]"></a>BC25_CGPADDR</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bc25.o(i.BC25_CGPADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BC25_CGPADDR &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
</UL>

<P><STRONG><a name="[6c]"></a>BC25_CIMI</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bc25.o(i.BC25_CIMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BC25_CIMI &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
</UL>

<P><STRONG><a name="[6d]"></a>BC25_CPSMS</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bc25.o(i.BC25_CPSMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BC25_CPSMS &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
</UL>

<P><STRONG><a name="[6e]"></a>BC25_GPIO_INIT</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bc25.o(i.BC25_GPIO_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BC25_GPIO_INIT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>BC25_INIT</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, bc25.o(i.BC25_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BC25_INIT &rArr; BC25_QSCLK &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_QSCLK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_NNMI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CPSMS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CIMI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGPADDR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGATT
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>BC25_NNMI</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bc25.o(i.BC25_NNMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BC25_NNMI &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
</UL>

<P><STRONG><a name="[74]"></a>BC25_QSCLK</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bc25.o(i.BC25_QSCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BC25_QSCLK &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DHT11_Check</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_init
</UL>

<P><STRONG><a name="[78]"></a>DHT11_Rest</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dht11.o(i.DHT11_Rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_Rest
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_init
</UL>

<P><STRONG><a name="[79]"></a>DHT11_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dht11.o(i.DHT11_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rest
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>DelayUs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vl53l1x_i2c.o(i.DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
</UL>

<P><STRONG><a name="[70]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_GPIO_INIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init_LEDs
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1_GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_Init_LEDs</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i.GPIO_Init_LEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init_LEDs &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
</UL>

<P><STRONG><a name="[71]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_GPIO_INIT
</UL>

<P><STRONG><a name="[72]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_GPIO_INIT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>I2C_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[7c]"></a>I2C_Stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, oled.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[7d]"></a>I2C_WaitAck</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(i.I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[7e]"></a>MQ_Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, mq.o(i.MQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQ_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>NB_RST</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bc25.o(i.NB_RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NB_RST
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_QSCLK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_NNMI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CPSMS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CIMI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGPADDR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGATT
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[12d]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>OLED_ClearPoint</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, oled.o(i.OLED_ClearPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_ClearPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
</UL>

<P><STRONG><a name="[8c]"></a>OLED_DrawPoint</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
</UL>

<P><STRONG><a name="[89]"></a>OLED_Init</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>OLED_Refresh</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Refresh &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>OLED_ShowChar</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[8e]"></a>OLED_ShowChinese</STRONG> (Thumb, 248 bytes, Stack size 52 bytes, oled.o(i.OLED_ShowChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OLED_ShowChinese &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ClearPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>OLED_ShowString</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>OLED_WR_Byte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
</UL>

<P><STRONG><a name="[131]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
</UL>

<P><STRONG><a name="[9e]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[6f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_GPIO_INIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init_LEDs
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1_GPIO_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
</UL>

<P><STRONG><a name="[66]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[a0]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>Send_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, oled.o(i.Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[12a]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[9d]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
</UL>

<P><STRONG><a name="[9a]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[9f]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[9b]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>VL53L1_DataInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = VL53L1_DataInit &rArr; VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckValue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
</UL>

<P><STRONG><a name="[a5]"></a>VL53L1_GetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_GetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_GetInterMeasurementPeriodMilliSeconds &rArr; VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[a7]"></a>VL53L1_GetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, vl53l1_api.o(i.VL53L1_GetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L1_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L1_get_timeouts_us &rArr; VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[a8]"></a>VL53L1_GetSequenceStepEnable</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_GetSequenceStepEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_GetSequenceStepEnable &rArr; VL53L1_get_sequence_config_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[ac]"></a>VL53L1_I2C_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL53L1_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_I2C_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
</UL>

<P><STRONG><a name="[ae]"></a>VL53L1_PerformRefSpadManagement</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, vl53l1_api.o(i.VL53L1_PerformRefSpadManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = VL53L1_PerformRefSpadManagement &rArr; VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
</UL>

<P><STRONG><a name="[b3]"></a>VL53L1_RdByte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[b5]"></a>VL53L1_RdWord</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_RdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_RdWord &rArr; VL53L1_read_word &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_addr_set
</UL>

<P><STRONG><a name="[b7]"></a>VL53L1_ReadMulti</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_ReadMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
</UL>

<P><STRONG><a name="[b9]"></a>VL53L1_SetDeviceAddress</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L1_SetDeviceAddress &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_addr_set
</UL>

<P><STRONG><a name="[bb]"></a>VL53L1_SetDistanceMode</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, vl53l1_api.o(i.VL53L1_SetDistanceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = VL53L1_SetDistanceMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
</UL>

<P><STRONG><a name="[bf]"></a>VL53L1_SetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_SetInterMeasurementPeriodMilliSeconds &rArr; VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
</UL>

<P><STRONG><a name="[a3]"></a>VL53L1_SetLimitCheckEnable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_SetLimitCheckEnable &rArr; SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
</UL>

<P><STRONG><a name="[a4]"></a>VL53L1_SetLimitCheckValue</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_SetLimitCheckValue &rArr; SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
</UL>

<P><STRONG><a name="[c1]"></a>VL53L1_SetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, vl53l1_api.o(i.VL53L1_SetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = VL53L1_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
</UL>

<P><STRONG><a name="[b0]"></a>VL53L1_SetPresetMode</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[c2]"></a>VL53L1_StartMeasurement</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, vl53l1_api.o(i.VL53L1_StartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetInterMeasurementPeriodMilliSeconds
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
</UL>

<P><STRONG><a name="[c4]"></a>VL53L1_StaticInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_StaticInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_StaticInit &rArr; VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
</UL>

<P><STRONG><a name="[c5]"></a>VL53L1_WaitDeviceBooted</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_WaitDeviceBooted))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
</UL>

<P><STRONG><a name="[c7]"></a>VL53L1_WaitMs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vl53l1_platform.o(i.VL53L1_WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[c8]"></a>VL53L1_WaitUs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vl53l1_platform.o(i.VL53L1_WaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_WaitUs
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>

<P><STRONG><a name="[ca]"></a>VL53L1_WaitValueMaskEx</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, vl53l1_platform.o(i.VL53L1_WaitValueMaskEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_range_completion
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>

<P><STRONG><a name="[ba]"></a>VL53L1_WrByte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_WrByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDeviceAddress
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_start_test
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_powerforce_register
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_firmware_enable_register
</UL>

<P><STRONG><a name="[cc]"></a>VL53L1_WrWord</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_WrWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL53L1_WrWord &rArr; VL53L1_write_word &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
</UL>

<P><STRONG><a name="[b2]"></a>VL53L1_WriteMulti</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[cf]"></a>VL53L1_addr_set</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, vl53l1x.o(i.VL53L1_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_addr_set &rArr; VL53L1_SetDeviceAddress &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDeviceAddress
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
</UL>

<P><STRONG><a name="[d0]"></a>VL53L1_calc_decoded_timeout_us</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_decoded_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[d3]"></a>VL53L1_calc_encoded_timeout</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_encoded_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_timeout
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[d6]"></a>VL53L1_calc_macro_period_us</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vl53l1_core.o(i.VL53L1_calc_macro_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_calc_macro_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_vcsel_period
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[d7]"></a>VL53L1_calc_pll_period_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_calc_pll_period_us))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>

<P><STRONG><a name="[104]"></a>VL53L1_calc_range_ignore_threshold</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, vl53l1_core.o(i.VL53L1_calc_range_ignore_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
</UL>

<P><STRONG><a name="[d4]"></a>VL53L1_calc_timeout_mclks</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_mclks))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>

<P><STRONG><a name="[d9]"></a>VL53L1_calc_timeout_register_values</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_register_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
</UL>

<P><STRONG><a name="[d2]"></a>VL53L1_calc_timeout_us</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_calc_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[da]"></a>VL53L1_clear_interrupt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L1_clear_interrupt &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
</UL>

<P><STRONG><a name="[10c]"></a>VL53L1_config_low_power_auto_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_config_low_power_auto_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_config_low_power_auto_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
</UL>

<P><STRONG><a name="[119]"></a>VL53L1_copy_rtn_good_spads_to_buffer</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_copy_rtn_good_spads_to_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[a2]"></a>VL53L1_data_init</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_version
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_tuning_parm_storage_struct
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ssc_config_struct
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_refspadchar_config_struct
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_offset_cal_config_struct
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_vhv_loopbound
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[ee]"></a>VL53L1_decode_row_col</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_decode_row_col))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
</UL>

<P><STRONG><a name="[d1]"></a>VL53L1_decode_timeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_decode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>

<P><STRONG><a name="[d8]"></a>VL53L1_decode_vcsel_period</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_decode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>

<P><STRONG><a name="[f3]"></a>VL53L1_decode_zone_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_decode_zone_size))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
</UL>

<P><STRONG><a name="[e5]"></a>VL53L1_disable_firmware</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_disable_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_disable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_firmware_enable_register
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
</UL>

<P><STRONG><a name="[e7]"></a>VL53L1_disable_powerforce</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_disable_powerforce))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_disable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_powerforce_register
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
</UL>

<P><STRONG><a name="[e9]"></a>VL53L1_enable_firmware</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_enable_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_enable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_firmware_enable_register
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
</UL>

<P><STRONG><a name="[ea]"></a>VL53L1_enable_powerforce</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_enable_powerforce))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_enable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_powerforce_register
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
</UL>

<P><STRONG><a name="[11f]"></a>VL53L1_encode_row_col</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_encode_row_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
</UL>

<P><STRONG><a name="[d5]"></a>VL53L1_encode_timeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_encode_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>

<P><STRONG><a name="[120]"></a>VL53L1_encode_zone_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_encode_zone_size))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
</UL>

<P><STRONG><a name="[eb]"></a>VL53L1_get_customer_nvm_managed</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, vl53l1_register_funcs.o(i.VL53L1_get_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_get_customer_nvm_managed &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[a6]"></a>VL53L1_get_inter_measurement_period_ms</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_get_inter_measurement_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[ed]"></a>VL53L1_get_mode_mitigation_roi</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_get_mode_mitigation_roi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_get_mode_mitigation_roi
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[ef]"></a>VL53L1_get_nvm_copy_data</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, vl53l1_register_funcs.o(i.VL53L1_get_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_get_nvm_copy_data &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[96]"></a>VL53L1_get_preset_mode_timing_cfg</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_get_preset_mode_timing_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_preset_mode_timing_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[ab]"></a>VL53L1_get_sequence_config_bit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_get_sequence_config_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>

<P><STRONG><a name="[f1]"></a>VL53L1_get_static_nvm_managed</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(i.VL53L1_get_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_get_static_nvm_managed &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[a9]"></a>VL53L1_get_timeouts_us</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, vl53l1_api_core.o(i.VL53L1_get_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L1_get_timeouts_us &rArr; VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[aa]"></a>VL53L1_get_tuning_parm</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_get_tuning_parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_tuning_parm
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[bc]"></a>VL53L1_get_user_zone</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_get_user_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_user_zone
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_size
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>

<P><STRONG><a name="[ec]"></a>VL53L1_i2c_decode_customer_nvm_managed</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_customer_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
</UL>

<P><STRONG><a name="[f5]"></a>VL53L1_i2c_decode_int16_t</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[f0]"></a>VL53L1_i2c_decode_nvm_copy_data</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_nvm_copy_data &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
</UL>

<P><STRONG><a name="[f2]"></a>VL53L1_i2c_decode_static_nvm_managed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_static_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
</UL>

<P><STRONG><a name="[f4]"></a>VL53L1_i2c_decode_uint16_t</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[f6]"></a>VL53L1_i2c_encode_customer_nvm_managed</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_customer_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[f9]"></a>VL53L1_i2c_encode_dynamic_config</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_dynamic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_dynamic_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[fa]"></a>VL53L1_i2c_encode_general_config</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_general_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_general_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[f8]"></a>VL53L1_i2c_encode_int16_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[fb]"></a>VL53L1_i2c_encode_static_config</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_static_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_static_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[fc]"></a>VL53L1_i2c_encode_static_nvm_managed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_static_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[101]"></a>VL53L1_i2c_encode_system_control</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_encode_system_control
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[fd]"></a>VL53L1_i2c_encode_timing_config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_timing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_timing_config &rArr; VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint32_t
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[f7]"></a>VL53L1_i2c_encode_uint16_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[fe]"></a>VL53L1_i2c_encode_uint32_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
</UL>

<P><STRONG><a name="[ff]"></a>VL53L1_init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, vl53l1x.o(i.VL53L1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = VL53L1_init &rArr; VL53L1_SetDistanceMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1_GPIO_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_addr_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>VL53L1_init_and_start_range</STRONG> (Thumb, 628 bytes, Stack size 344 bytes, vl53l1_api_core.o(i.VL53L1_init_and_start_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_rd_state
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_cfg_state
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_system_control
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[db]"></a>VL53L1_init_ll_driver_state</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_init_ll_driver_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>

<P><STRONG><a name="[e1]"></a>VL53L1_init_offset_cal_config_struct</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_offset_cal_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[de]"></a>VL53L1_init_refspadchar_config_struct</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_refspadchar_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[df]"></a>VL53L1_init_ssc_config_struct</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_ssc_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[e2]"></a>VL53L1_init_tuning_parm_storage_struct</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_tuning_parm_storage_struct))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[dc]"></a>VL53L1_init_version</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_init_version))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[e0]"></a>VL53L1_init_xtalk_config_struct</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_xtalk_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VL53L1_init_xtalk_config_struct &rArr; VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[105]"></a>VL53L1_is_new_data_ready</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, vl53l1_wait.o(i.VL53L1_is_new_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
</UL>

<P><STRONG><a name="[e4]"></a>VL53L1_low_power_auto_data_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_low_power_auto_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[c6]"></a>VL53L1_poll_for_boot_completion</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vl53l1_wait.o(i.VL53L1_poll_for_boot_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
</UL>

<P><STRONG><a name="[109]"></a>VL53L1_poll_for_range_completion</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, vl53l1_wait.o(i.VL53L1_poll_for_range_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
</UL>

<P><STRONG><a name="[10a]"></a>VL53L1_preset_mode_low_power_auto_long_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_long_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VL53L1_preset_mode_low_power_auto_long_ranging &rArr; VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[10d]"></a>VL53L1_preset_mode_low_power_auto_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = VL53L1_preset_mode_low_power_auto_ranging &rArr; VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[10f]"></a>VL53L1_preset_mode_low_power_auto_short_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_short_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[111]"></a>VL53L1_preset_mode_olt</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_olt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_olt &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[113]"></a>VL53L1_preset_mode_singleshot_ranging</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_singleshot_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_singleshot_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[112]"></a>VL53L1_preset_mode_standard_ranging</STRONG> (Thumb, 314 bytes, Stack size 20 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[114]"></a>VL53L1_preset_mode_standard_ranging_long_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[115]"></a>VL53L1_preset_mode_standard_ranging_mm1_cal</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_mm1_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm1_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[116]"></a>VL53L1_preset_mode_standard_ranging_mm2_cal</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_mm2_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm2_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[117]"></a>VL53L1_preset_mode_standard_ranging_short_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[10e]"></a>VL53L1_preset_mode_timed_ranging</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[10b]"></a>VL53L1_preset_mode_timed_ranging_long_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[110]"></a>VL53L1_preset_mode_timed_ranging_short_range</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[b4]"></a>VL53L1_read_byte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>

<P><STRONG><a name="[b8]"></a>VL53L1_read_multi</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_read_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_word
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_byte
</UL>

<P><STRONG><a name="[dd]"></a>VL53L1_read_p2p_data</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_read_p2p_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L1_read_p2p_data &rArr; VL53L1_get_nvm_copy_data &rArr; VL53L1_ReadMulti &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_rtn_good_spads_to_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[b6]"></a>VL53L1_read_word</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_read_word &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
</UL>

<P><STRONG><a name="[11a]"></a>VL53L1_run_device_test</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, vl53l1_api_calibration.o(i.VL53L1_run_device_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VL53L1_run_device_test &rArr; VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_wait_for_test_completion
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_start_test
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
</UL>

<P><STRONG><a name="[af]"></a>VL53L1_run_ref_spad_char</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, vl53l1_api_calibration.o(i.VL53L1_run_ref_spad_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = VL53L1_run_ref_spad_char &rArr; VL53L1_run_device_test &rArr; VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_powerforce
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_ref_spad_char_config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[e6]"></a>VL53L1_set_firmware_enable_register</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vl53l1_core.o(i.VL53L1_set_firmware_enable_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_firmware
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_firmware
</UL>

<P><STRONG><a name="[c0]"></a>VL53L1_set_inter_measurement_period_ms</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_set_inter_measurement_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[93]"></a>VL53L1_set_lite_min_count_rate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_set_lite_min_count_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[92]"></a>VL53L1_set_lite_sigma_threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_set_lite_sigma_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[11e]"></a>VL53L1_set_mode</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, vl53l1x.o(i.VL53L1_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = VL53L1_set_mode &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckValue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>VL53L1_set_powerforce_register</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, vl53l1_core.o(i.VL53L1_set_powerforce_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_powerforce
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_powerforce
</UL>

<P><STRONG><a name="[97]"></a>VL53L1_set_preset_mode</STRONG> (Thumb, 474 bytes, Stack size 80 bytes, vl53l1_api_core.o(i.VL53L1_set_preset_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[11d]"></a>VL53L1_set_ref_spad_char_config</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, vl53l1_core.o(i.VL53L1_set_ref_spad_char_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L1_set_ref_spad_char_config &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrWord
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_ref_spad_char
</UL>

<P><STRONG><a name="[bd]"></a>VL53L1_set_timeouts_us</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, vl53l1_api_core.o(i.VL53L1_set_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[be]"></a>VL53L1_set_user_zone</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_set_user_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_set_user_zone &rArr; VL53L1_encode_row_col
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_zone_size
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>

<P><STRONG><a name="[e3]"></a>VL53L1_set_vhv_loopbound</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_set_vhv_loopbound))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_vhv_loopbound
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[11b]"></a>VL53L1_start_test</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_start_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L1_start_test &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
</UL>

<P><STRONG><a name="[103]"></a>VL53L1_update_ll_driver_cfg_state</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_update_ll_driver_cfg_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_update_ll_driver_cfg_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[102]"></a>VL53L1_update_ll_driver_rd_state</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_update_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_update_ll_driver_rd_state
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[11c]"></a>VL53L1_wait_for_test_completion</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vl53l1_wait.o(i.VL53L1_wait_for_test_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = VL53L1_wait_for_test_completion &rArr; VL53L1_poll_for_range_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53L1_read_byte &rArr; VL53L1_read_multi &rArr; VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_range_completion
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_run_device_test
</UL>

<P><STRONG><a name="[cb]"></a>VL53L1_write_byte</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, vl53l1x_i2c.o(i.VL53L1_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>

<P><STRONG><a name="[ce]"></a>VL53L1_write_multi</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_write_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_word
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_byte
</UL>

<P><STRONG><a name="[cd]"></a>VL53L1_write_word</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL53L1_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL53L1_write_word &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrWord
</UL>

<P><STRONG><a name="[100]"></a>VL53l1_GPIO_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vl53l1x.o(i.VL53l1_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53l1_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
</UL>

<P><STRONG><a name="[118]"></a>VL_I2C_Read_nByte</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL_I2C_Read_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL_I2C_Read_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_multi
</UL>

<P><STRONG><a name="[121]"></a>VL_I2C_Write_nByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, vl53l1x_i2c.o(i.VL_I2C_Write_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_write_multi
</UL>

<P><STRONG><a name="[128]"></a>VL_IIC_Ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL_IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[127]"></a>VL_IIC_NAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL_IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[126]"></a>VL_IIC_Read_Byte</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, vl53l1x_i2c.o(i.VL_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL_IIC_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[123]"></a>VL_IIC_Send_Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, vl53l1x_i2c.o(i.VL_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL_IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[122]"></a>VL_IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[125]"></a>VL_IIC_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[124]"></a>VL_IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, vl53l1x_i2c.o(i.VL_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Write_nByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
</UL>

<P><STRONG><a name="[5b]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[129]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rest
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_QSCLK
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_NNMI
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CPSMS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CIMI
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGPADDR
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_CGATT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_I2C_Read_nByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
</UL>

<P><STRONG><a name="[77]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Rest
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Check
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = main &rArr; VL53L1_set_mode &rArr; VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChinese
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_RST
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQ_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_INIT
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BC25_GPIO_INIT
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init_LEDs
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init_2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12b]"></a>uart_init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>uart_init_2</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, usart.o(i.uart_init_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init_2 &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[98]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[99]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[95]"></a>ComputeDevicePresetMode</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53l1_api.o(i.ComputeDevicePresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComputeDevicePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[91]"></a>SetLimitValue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vl53l1_api.o(i.SetLimitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_sigma_threshold
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckValue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
</UL>

<P><STRONG><a name="[94]"></a>SetPresetMode</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, vl53l1_api.o(i.SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeDevicePresetMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_preset_mode_timing_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
</UL>

<P><STRONG><a name="[106]"></a>VL53L1_nvm_disable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_nvm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L1_nvm_disable &rArr; VL53L1_enable_firmware &rArr; VL53L1_set_firmware_enable_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_firmware
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_powerforce
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
</UL>

<P><STRONG><a name="[107]"></a>VL53L1_nvm_enable</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_nvm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L1_nvm_enable &rArr; VL53L1_enable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_enable_powerforce
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_disable_firmware
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrWord
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
</UL>

<P><STRONG><a name="[108]"></a>VL53L1_nvm_read</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, vl53l1_api.o(i.VL53L1_nvm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L1_nvm_read &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WrByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_nvm_raw_data
</UL>

<P><STRONG><a name="[b1]"></a>VL53L1_read_nvm_raw_data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_read_nvm_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = VL53L1_read_nvm_raw_data &rArr; VL53L1_nvm_enable &rArr; VL53L1_enable_powerforce &rArr; VL53L1_set_powerforce_register &rArr; VL53L1_WrByte &rArr; VL53L1_write_byte &rArr; VL53L1_write_multi &rArr; VL_I2C_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_enable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_nvm_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[4b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
